
Amon_link.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006bc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000006bc  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  000006eb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cd0  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab2  00000000  00000000  000024e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093b  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000281  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075d  00000000  00000000  00003de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004542  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000005f8  000005f8  000006ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004614  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.GPIO_PIN_Write 000000a8  00000374  00000374  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.GPIO_PIN_Toggle 0000004e  000004f6  000004f6  000005aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 00000073  000000c2  000000c2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.__vector_11 00000130  00000136  00000136  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_18 0000007a  0000041c  0000041c  000004d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.IRQ_Timer1_Init 00000028  00000570  00000570  00000624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.USART_Init 00000016  000005b2  000005b2  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.DeviceInit 00000060  00000496  00000496  0000054a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    0000010e  00000266  00000266  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.UART_DATA_Recieve 00000064  00800101  00800101  000006bc  2**0
                  ALLOC
 25 .bss.Data_Count 00000001  00800165  00800165  000006bc  2**0
                  ALLOC
 26 .bss.PairStatus 00000001  00800166  00800166  000006bc  2**0
                  ALLOC
 27 .bss.PairTrig 00000001  00800167  00800167  000006bc  2**0
                  ALLOC
 28 .bss.PairTime 00000001  00800168  00800168  000006bc  2**0
                  ALLOC
 29 .bss.InitTime 00000001  00800169  00800169  000006bc  2**0
                  ALLOC
 30 .bss.InitError 00000001  0080016a  0080016a  000006bc  2**0
                  ALLOC
 31 .bss.InitEND  00000001  0080016b  0080016b  000006bc  2**0
                  ALLOC
 32 .bss.DeviceState 00000001  0080016c  0080016c  000006bc  2**0
                  ALLOC
 33 .text.SPI_Init 00000006  000005f2  000005f2  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.USART_RX_DATA_Decode 00000002  00000600  00000600  000006b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.USART_DATA_Transmit 0000002c  00000544  00000544  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_20 00000014  000005de  000005de  00000692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc  0000001a  00000598  00000598  0000064c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_fini 00000002  00000602  00000602  000006b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_funcs_on_exit 00000002  00000604  00000604  000006b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_simulator_exit 00000002  00000606  00000606  000006ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.exit    00000016  000005c8  000005c8  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000004  000005fc  000005fc  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
   8:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
   c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  10:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  14:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  18:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  1c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  20:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  24:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  28:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_11>
  30:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  34:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  38:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  3c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  40:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  44:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  48:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_18>
  4c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  50:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_20>
  54:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  58:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  5c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  60:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>
  64:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 6d       	ori	r16, 0xD1	; 209
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 33 01 	call	0x266	; 0x266 <main>
  ba:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000005f8 <__bad_interrupt>:
 5f8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.GPIO_PIN_Write:

00000374 <GPIO_PIN_Write>:
}

/* Set pin to high/low */
void GPIO_PIN_Write(char port, uint8_t pinNum, char state){
	
	switch(port){
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	f9 f0       	breq	.+62     	; 0x3b6 <GPIO_PIN_Write+0x42>
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	b9 f1       	breq	.+110    	; 0x3ea <GPIO_PIN_Write+0x76>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <GPIO_PIN_Write+0xe>
 380:	4c c0       	rjmp	.+152    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		case 1:
			(state) ? (PORTB |= (1 << pinNum)) : (PORTB &= ~(1 << pinNum));
 382:	44 23       	and	r20, r20
 384:	61 f0       	breq	.+24     	; 0x39e <GPIO_PIN_Write+0x2a>
 386:	25 b1       	in	r18, 0x05	; 5
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	06 2e       	mov	r0, r22
 38e:	02 c0       	rjmp	.+4      	; 0x394 <GPIO_PIN_Write+0x20>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <GPIO_PIN_Write+0x1c>
 398:	82 2b       	or	r24, r18
 39a:	85 b9       	out	0x05, r24	; 5
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <GPIO_PIN_Write+0x42>
 39e:	25 b1       	in	r18, 0x05	; 5
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	06 2e       	mov	r0, r22
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GPIO_PIN_Write+0x38>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GPIO_PIN_Write+0x34>
 3b0:	80 95       	com	r24
 3b2:	82 23       	and	r24, r18
 3b4:	85 b9       	out	0x05, r24	; 5
		case 2:
			(state) ? (PORTC |= (1 << pinNum)) : (PORTC &= ~(1 << pinNum));
 3b6:	44 23       	and	r20, r20
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <GPIO_PIN_Write+0x5e>
 3ba:	28 b1       	in	r18, 0x08	; 8
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	06 2e       	mov	r0, r22
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <GPIO_PIN_Write+0x54>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <GPIO_PIN_Write+0x50>
 3cc:	82 2b       	or	r24, r18
 3ce:	88 b9       	out	0x08, r24	; 8
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <GPIO_PIN_Write+0x76>
 3d2:	28 b1       	in	r18, 0x08	; 8
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	06 2e       	mov	r0, r22
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <GPIO_PIN_Write+0x6c>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <GPIO_PIN_Write+0x68>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	88 b9       	out	0x08, r24	; 8
		case 3:
			(state) ? (PORTD |= (1 << pinNum)) : (PORTD &= ~(1 << pinNum));
 3ea:	44 23       	and	r20, r20
 3ec:	59 f0       	breq	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ee:	2b b1       	in	r18, 0x0b	; 11
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <GPIO_PIN_Write+0x86>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <GPIO_PIN_Write+0x82>
 3fe:	82 2b       	or	r24, r18
 400:	8b b9       	out	0x0b, r24	; 11
 402:	08 95       	ret
 404:	2b b1       	in	r18, 0x0b	; 11
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	8b b9       	out	0x0b, r24	; 11
 41a:	08 95       	ret

Disassembly of section .text.GPIO_PIN_Toggle:

000004f6 <GPIO_PIN_Toggle>:
}

/* Toggle pin value */
void GPIO_PIN_Toggle(char port, uint8_t pinNum){
		
	switch(port){
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	79 f0       	breq	.+30     	; 0x518 <GPIO_PIN_Toggle+0x22>
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	c1 f0       	breq	.+48     	; 0x52e <GPIO_PIN_Toggle+0x38>
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	01 f5       	brne	.+64     	; 0x542 <GPIO_PIN_Toggle+0x4c>
		case 1:
			PORTB ^= (1 << pinNum);
 502:	25 b1       	in	r18, 0x05	; 5
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	06 2e       	mov	r0, r22
 50a:	02 c0       	rjmp	.+4      	; 0x510 <GPIO_PIN_Toggle+0x1a>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <GPIO_PIN_Toggle+0x16>
 514:	82 27       	eor	r24, r18
 516:	85 b9       	out	0x05, r24	; 5
		case 2:
			PORTC ^= (1 << pinNum);
 518:	28 b1       	in	r18, 0x08	; 8
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	06 2e       	mov	r0, r22
 520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_PIN_Toggle+0x30>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_PIN_Toggle+0x2c>
 52a:	82 27       	eor	r24, r18
 52c:	88 b9       	out	0x08, r24	; 8
		case 3:
			PORTD ^= (1 << pinNum);
 52e:	2b b1       	in	r18, 0x0b	; 11
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <GPIO_PIN_Toggle+0x44>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <GPIO_PIN_Toggle+0x40>
 53e:	82 27       	eor	r24, r18
 540:	8b b9       	out	0x0b, r24	; 11
 542:	08 95       	ret

Disassembly of section .text.__vector_11:

00000136 <__vector_11>:
#include <xc.h>
#include "../inc/main.h"

/* Timer_1 IRQ */
ISR(TIMER1_COMPA_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	a3 97       	sbiw	r28, 0x23	; 35
 162:	de bf       	out	0x3e, r29	; 62
 164:	cd bf       	out	0x3d, r28	; 61
	// Startup init //
	if (InitEND == 0)
 166:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <InitEND>
 16a:	81 11       	cpse	r24, r1
 16c:	15 c0       	rjmp	.+42     	; 0x198 <__vector_11+0x62>
	{
		
		if (InitTime >= 30)		// Init time - over
 16e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <InitTime>
 172:	8e 31       	cpi	r24, 0x1E	; 30
 174:	50 f0       	brcs	.+20     	; 0x18a <__vector_11+0x54>
		{	
			InitEND = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <InitEND>
			InitTime = 0;
 17c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <InitTime>
			GPIO_PIN_Write(GPIO_PORT_B,LED_Red,GPIO_HIGH);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
 188:	07 c0       	rjmp	.+14     	; 0x198 <__vector_11+0x62>
		}
		else					// Init time - not over
		{
			InitTime++;
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <InitTime>
			GPIO_PIN_Toggle(GPIO_PORT_B,LED_Red); // Blink led red
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_PIN_Toggle>
		}
	}
	
	// Pair sequence (triggered after startup or with button) //
	if(PairTrig == 1)
 198:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <PairTrig>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <__vector_11+0x6c>
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__vector_11+0xfe>
	{			
	
		if (PairTime >= 60 || PairStatus == 1)		// Pair time over
 1a2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <PairTime>
 1a6:	8c 33       	cpi	r24, 0x3C	; 60
 1a8:	20 f4       	brcc	.+8      	; 0x1b2 <__vector_11+0x7c>
 1aa:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <PairStatus>
 1ae:	91 30       	cpi	r25, 0x01	; 1
 1b0:	d1 f5       	brne	.+116    	; 0x226 <__vector_11+0xf0>
		{	
			PairTrig = 0;
 1b2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <PairTrig>
			PairTime = 0;
 1b6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <PairTime>
			
			GPIO_PIN_Write(GPIO_PORT_B,LED_Blue,GPIO_HIGH);	// Blue led off	
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>

			// Change device status on state of connection
			if (PairStatus == CONNECTED)
 1c4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <PairStatus>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	a1 f4       	brne	.+40     	; 0x1f4 <__vector_11+0xbe>
			{
				DeviceState = STATE_CONNECTED;
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <DeviceState>
				uint8_t DataToSend[15] = {"Connected\r\n\0"};
 1d2:	22 ec       	ldi	r18, 0xC2	; 194
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	f9 01       	movw	r30, r18
 1dc:	de 01       	movw	r26, r28
 1de:	11 96       	adiw	r26, 0x01	; 1
 1e0:	74 2f       	mov	r23, r20
 1e2:	0e 94 cc 02 	call	0x598	; 0x598 <__movmemx_qi>
 1e6:	1f 86       	std	Y+15, r1	; 0x0f
 1e8:	1e 86       	std	Y+14, r1	; 0x0e
				USART_DATA_Transmit(&DataToSend[0]);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 a2 02 	call	0x544	; 0x544 <USART_DATA_Transmit>
 1f2:	20 c0       	rjmp	.+64     	; 0x234 <__vector_11+0xfe>
			}
			else
			{
				DeviceState = STATE_NOT_CONNECTED;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <DeviceState>
				uint8_t DataToSend[35] = {"Pairing unsuccessful!\r\n\0"};
 1fa:	21 ed       	ldi	r18, 0xD1	; 209
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	89 e1       	ldi	r24, 0x19	; 25
 202:	f9 01       	movw	r30, r18
 204:	de 01       	movw	r26, r28
 206:	11 96       	adiw	r26, 0x01	; 1
 208:	74 2f       	mov	r23, r20
 20a:	0e 94 cc 02 	call	0x598	; 0x598 <__movmemx_qi>
 20e:	fe 01       	movw	r30, r28
 210:	7a 96       	adiw	r30, 0x1a	; 26
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	df 01       	movw	r26, r30
 216:	1d 92       	st	X+, r1
 218:	8a 95       	dec	r24
 21a:	e9 f7       	brne	.-6      	; 0x216 <__vector_11+0xe0>
				USART_DATA_Transmit(&DataToSend[0]);
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	0e 94 a2 02 	call	0x544	; 0x544 <USART_DATA_Transmit>
 224:	07 c0       	rjmp	.+14     	; 0x234 <__vector_11+0xfe>
			}
		
		}
		else									   // Pair time - not over
		{
			PairTime++;
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <PairTime>
			GPIO_PIN_Toggle(GPIO_PORT_B,LED_Blue); // Blink blue led
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_PIN_Toggle>
		}
		
	}
	
}
 234:	a3 96       	adiw	r28, 0x23	; 35
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

Disassembly of section .text.__vector_18:

0000041c <__vector_18>:


/* UART IRQ Receive */
ISR(USART_RX_vect)
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	2f 93       	push	r18
 428:	3f 93       	push	r19
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	6f 93       	push	r22
 430:	7f 93       	push	r23
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
	RecievedDataBuffer = UDR0; // incoming data
 43e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 442:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Read data and save in buffer
	if (RecievedDataBuffer == '\0'){
 446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44a:	81 11       	cpse	r24, r1
 44c:	07 c0       	rjmp	.+14     	; 0x45c <__vector_18+0x40>
		
		Data_Count = 0;		// reset data counter for saving in array
 44e:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <Data_Count>
		USART_RX_DATA_Decode(&UART_DATA_Recieve[0]);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 00 03 	call	0x600	; 0x600 <USART_RX_DATA_Decode>
 45a:	0c c0       	rjmp	.+24     	; 0x474 <__vector_18+0x58>
		
	}
	else
	{
		// Save received data and increase counter
		UART_DATA_Recieve[Data_Count] = RecievedDataBuffer;
 45c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <Data_Count>
 460:	e8 2f       	mov	r30, r24
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 468:	ef 5f       	subi	r30, 0xFF	; 255
 46a:	fe 4f       	sbci	r31, 0xFE	; 254
 46c:	90 83       	st	Z, r25
		Data_Count++;
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <Data_Count>
	}
}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

Disassembly of section .text.IRQ_Timer1_Init:

00000570 <IRQ_Timer1_Init>:


/* Init for timer */
void IRQ_Timer1_Init()
{
	TCCR1B |= (1 << WGM12 );   // Configure timer 1 for CTC mode
 570:	e1 e8       	ldi	r30, 0x81	; 129
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 60       	ori	r24, 0x08	; 8
 578:	80 83       	st	Z, r24
	OCR1A = 25000;             // 10Hz (100mS) at 16MHz, prescaler 64
 57a:	88 ea       	ldi	r24, 0xA8	; 168
 57c:	91 e6       	ldi	r25, 0x61	; 97
 57e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 582:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A );  // Enable interrupt
 586:	af e6       	ldi	r26, 0x6F	; 111
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	8c 91       	ld	r24, X
 58c:	82 60       	ori	r24, 0x02	; 2
 58e:	8c 93       	st	X, r24
	TCCR1B |= ((1 << CS10 ) | (1 << CS11 )); // Start Timer F_CPU/64
 590:	80 81       	ld	r24, Z
 592:	83 60       	ori	r24, 0x03	; 3
 594:	80 83       	st	Z, r24
 596:	08 95       	ret

Disassembly of section .text.USART_Init:

000005b2 <USART_Init>:
}

/* Init for UART */
void USART_Init(unsigned int presc)
{
	UBRR0H = (unsigned char)(presc>>8);
 5b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)presc;
 5b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 5ba:	88 ed       	ldi	r24, 0xD8	; 216
 5bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = USART_MODE | USART_PARITY_MODE | USART_STOP_BIT | USART_DATA_BIT;
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5c6:	08 95       	ret

Disassembly of section .text.DeviceInit:

00000496 <DeviceInit>:
uint8_t DeviceInit()
{
	uint8_t error = 0;
	
	// GPIO
	DDRB |= (1 << RF_SCK) |(1 << RF_MOSI) | (1 << LED_Green) | (1 << LED_Blue) | (1 << LED_Red) ; // set port B 
 496:	84 b1       	in	r24, 0x04	; 4
 498:	8f 62       	ori	r24, 0x2F	; 47
 49a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000000; // set port C I/O
 49c:	17 b8       	out	0x07, r1	; 7
	DDRD |= (1 << RF_CSN2) | (1 << RF_CE2) | (1 << RF_CE1) | (1 << RF_CSN1) ; // set port D I/O
 49e:	8a b1       	in	r24, 0x0a	; 10
 4a0:	88 6d       	ori	r24, 0xD8	; 216
 4a2:	8a b9       	out	0x0a, r24	; 10
	GPIO_PIN_Write(GPIO_PORT_B,LED_Blue,GPIO_HIGH);
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
	GPIO_PIN_Write(GPIO_PORT_B,LED_Green,GPIO_HIGH);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
	
	// IRQ
	IRQ_Timer1_Init();
 4b8:	0e 94 b8 02 	call	0x570	; 0x570 <IRQ_Timer1_Init>
	USART_Init(USART_PRESC);
 4bc:	87 e6       	ldi	r24, 0x67	; 103
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <USART_Init>
	
	// SPI - RF
	SPI_Init();
 4c4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SPI_Init>
	
	GPIO_PIN_Write(GPIO_PORT_D,RF_CE1,GPIO_HIGH); // set radio1 as transmitter
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	64 e0       	ldi	r22, 0x04	; 4
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
	GPIO_PIN_Write(GPIO_PORT_D,RF_CE2,GPIO_LOW);  // set radio2 as receiver
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	66 e0       	ldi	r22, 0x06	; 6
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
	
	GPIO_PIN_Write(GPIO_PORT_D,RF_CSN1,GPIO_LOW); // CSN high - off
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
	GPIO_PIN_Write(GPIO_PORT_D,RF_CSN2,GPIO_LOW); // CSN high - off
 4e6:	40 e0       	ldi	r20, 0x00	; 0
 4e8:	67 e0       	ldi	r22, 0x07	; 7
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
	//INT0_interrupt_Init();
	//NRF24L01_Inti1();
	//NRF24L01_Inti2();
	
	sei();	// Enable all interrupts
 4f0:	78 94       	sei
	if(error == 0){
		return 0;
	}else{
		return 1;
	}
}
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret

Disassembly of section .text.main:

00000266 <main>:
}


///****** MAIN BEGIN ******///
int main(void)
{	
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	a3 97       	sbiw	r28, 0x23	; 35
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	31 ee       	ldi	r19, 0xE1	; 225
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	21 50       	subi	r18, 0x01	; 1
 282:	30 40       	sbci	r19, 0x00	; 0
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x1a>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x24>
 28a:	00 00       	nop
	_delay_ms(100); // Start delay for all devices to power on
	
	while(1){
	
		/* State machine */
		switch (DeviceState){
 28c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <DeviceState>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	09 f4       	brne	.+2      	; 0x296 <main+0x30>
 294:	42 c0       	rjmp	.+132    	; 0x31a <main+0xb4>
 296:	28 f4       	brcc	.+10     	; 0x2a2 <main+0x3c>
 298:	88 23       	and	r24, r24
 29a:	51 f0       	breq	.+20     	; 0x2b0 <main+0x4a>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	b9 f1       	breq	.+110    	; 0x30e <main+0xa8>
 2a0:	65 c0       	rjmp	.+202    	; 0x36c <main+0x106>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <main+0x42>
 2a6:	3f c0       	rjmp	.+126    	; 0x326 <main+0xc0>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0x48>
 2ac:	59 c0       	rjmp	.+178    	; 0x360 <main+0xfa>
 2ae:	5e c0       	rjmp	.+188    	; 0x36c <main+0x106>
			/*
			/ Initialize all devices and I/O - first step (default) after power one
			*/
			case STATE_INIT:
			
				InitError = DeviceInit();	
 2b0:	0e 94 4b 02 	call	0x496	; 0x496 <DeviceInit>
 2b4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <InitError>
 2b8:	9a ea       	ldi	r25, 0xAA	; 170
 2ba:	a6 ee       	ldi	r26, 0xE6	; 230
 2bc:	b6 e9       	ldi	r27, 0x96	; 150
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	91 50       	subi	r25, 0x01	; 1
 2c2:	a0 40       	sbci	r26, 0x00	; 0
 2c4:	b0 40       	sbci	r27, 0x00	; 0
 2c6:	20 40       	sbci	r18, 0x00	; 0
 2c8:	d9 f7       	brne	.-10     	; 0x2c0 <main+0x5a>
 2ca:	00 00       	nop
				
				
				_delay_ms(10000);
			
				// No error in init and after init time
				if (InitError == 0 && InitEND == 1)						
 2cc:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <InitError>
 2d0:	81 11       	cpse	r24, r1
 2d2:	dc cf       	rjmp	.-72     	; 0x28c <main+0x26>
 2d4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <InitEND>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	c1 f6       	brne	.-80     	; 0x28c <main+0x26>
				{						
					uint8_t DataToSend[30] = {"****** Amon Link ******\r\n\0"};
 2dc:	24 ef       	ldi	r18, 0xF4	; 244
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	8b e1       	ldi	r24, 0x1B	; 27
 2e4:	f9 01       	movw	r30, r18
 2e6:	de 01       	movw	r26, r28
 2e8:	11 96       	adiw	r26, 0x01	; 1
 2ea:	74 2f       	mov	r23, r20
 2ec:	0e 94 cc 02 	call	0x598	; 0x598 <__movmemx_qi>
 2f0:	13 e0       	ldi	r17, 0x03	; 3
 2f2:	fe 01       	movw	r30, r28
 2f4:	7c 96       	adiw	r30, 0x1c	; 28
 2f6:	df 01       	movw	r26, r30
 2f8:	21 2f       	mov	r18, r17
 2fa:	1d 92       	st	X+, r1
 2fc:	2a 95       	dec	r18
 2fe:	e9 f7       	brne	.-6      	; 0x2fa <main+0x94>
					USART_DATA_Transmit(&DataToSend[0]);
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 a2 02 	call	0x544	; 0x544 <USART_DATA_Transmit>
					DeviceState = STATE_CONNECTING;	// Change device state
 308:	10 93 6c 01 	sts	0x016C, r17	; 0x80016c <DeviceState>
 30c:	bf cf       	rjmp	.-130    	; 0x28c <main+0x26>
			/* 
			/ State when device is not connected to drone (after unsuccessful pairing, new connecting sequence can bi triggered by button)
			*/
			case STATE_NOT_CONNECTED:
			
				GPIO_PIN_Write(GPIO_PORT_B,LED_Blue,GPIO_LOW); // Blue led on
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>

				if (PairTrig == 0){
					//PairTrig = 1;
				}
		
			break;
 318:	b9 cf       	rjmp	.-142    	; 0x28c <main+0x26>
			/* 
			/ Connection with drone is established
			*/
			case STATE_CONNECTED:
			
				GPIO_PIN_Write(GPIO_PORT_B,LED_Green,GPIO_LOW);	// Green led on
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
		
			break;
 324:	b3 cf       	rjmp	.-154    	; 0x28c <main+0x26>
			/* 
			/ Connecting stage (triggered by button or automatically after first initialization)
			*/
			case STATE_CONNECTING:
			
				if (PairTrig == 0){
 326:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <PairTrig>
 32a:	81 11       	cpse	r24, r1
 32c:	af cf       	rjmp	.-162    	; 0x28c <main+0x26>
					PairTrig = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <PairTrig>
					uint8_t DataToSend[35] = {"Pairing...\r\n\0"};
 334:	22 e1       	ldi	r18, 0x12	; 18
 336:	31 e0       	ldi	r19, 0x01	; 1
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	8e e0       	ldi	r24, 0x0E	; 14
 33c:	f9 01       	movw	r30, r18
 33e:	de 01       	movw	r26, r28
 340:	11 96       	adiw	r26, 0x01	; 1
 342:	74 2f       	mov	r23, r20
 344:	0e 94 cc 02 	call	0x598	; 0x598 <__movmemx_qi>
 348:	fe 01       	movw	r30, r28
 34a:	3f 96       	adiw	r30, 0x0f	; 15
 34c:	85 e1       	ldi	r24, 0x15	; 21
 34e:	df 01       	movw	r26, r30
 350:	1d 92       	st	X+, r1
 352:	8a 95       	dec	r24
 354:	e9 f7       	brne	.-6      	; 0x350 <main+0xea>
					USART_DATA_Transmit(&DataToSend[0]);
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 a2 02 	call	0x544	; 0x544 <USART_DATA_Transmit>
 35e:	96 cf       	rjmp	.-212    	; 0x28c <main+0x26>
			/* 
			/ Error state, somethings wrong with device on initialization ("cant be used yet")
			*/
			case STATE_ERROR:

				GPIO_PIN_Write(GPIO_PORT_B,LED_Red,GPIO_LOW); // Red led on
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 ba 01 	call	0x374	; 0x374 <GPIO_PIN_Write>
		
			break;
 36a:	90 cf       	rjmp	.-224    	; 0x28c <main+0x26>
			/*
			/ Undefined state - catastrophic failure
			*/
			default:	
		
				DeviceState = STATE_ERROR;
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <DeviceState>
 372:	8c cf       	rjmp	.-232    	; 0x28c <main+0x26>

Disassembly of section .text.SPI_Init:

000005f2 <SPI_Init>:

void SPI_Init()
{
	// CS, MOSI, SCK output; MISO input -> Set in main
    // enable and set SPI
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
 5f2:	83 e5       	ldi	r24, 0x53	; 83
 5f4:	8c bd       	out	0x2c, r24	; 44
 5f6:	08 95       	ret

Disassembly of section .text.USART_RX_DATA_Decode:

00000600 <USART_RX_DATA_Decode>:
uint8_t UART_DATA_Buffer_Transmit[100] = {};


/* UART decode and communication */
void USART_RX_DATA_Decode(uint8_t *data)
{
 600:	08 95       	ret

Disassembly of section .text.USART_DATA_Transmit:

00000544 <USART_DATA_Transmit>:

}

/* UART transmit data */
void USART_DATA_Transmit(uint8_t *data)
{
 544:	bc 01       	movw	r22, r24
	for(int i = 0; i<100;i++){
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	0e c0       	rjmp	.+28     	; 0x568 <USART_DATA_Transmit+0x24>
		if ((*(data+i)) == '\0'){
 54c:	fb 01       	movw	r30, r22
 54e:	e2 0f       	add	r30, r18
 550:	f3 1f       	adc	r31, r19
 552:	40 81       	ld	r20, Z
 554:	44 23       	and	r20, r20
 556:	59 f0       	breq	.+22     	; 0x56e <USART_DATA_Transmit+0x2a>
			break;
		}else{
			while ( !( UCSR0A & (1<<UDRE0)) );		
 558:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 55c:	95 ff       	sbrs	r25, 5
 55e:	fc cf       	rjmp	.-8      	; 0x558 <USART_DATA_Transmit+0x14>
			UDR0 = (*(data+i)) ; // TransmitDataBuffer
 560:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

/* UART transmit data */
void USART_DATA_Transmit(uint8_t *data)
{
	for(int i = 0; i<100;i++){
 564:	2f 5f       	subi	r18, 0xFF	; 255
 566:	3f 4f       	sbci	r19, 0xFF	; 255
 568:	24 36       	cpi	r18, 0x64	; 100
 56a:	31 05       	cpc	r19, r1
 56c:	7c f3       	brlt	.-34     	; 0x54c <USART_DATA_Transmit+0x8>
 56e:	08 95       	ret

Disassembly of section .text.__vector_20:

000005de <__vector_20>:
	}
}

/* USART Transmit Interrupt *** */
ISR(USART_TX_vect)
{
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
	// TRANSMIT...
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

Disassembly of section .text.libgcc:

00000598 <__movmemx_qi>:
 598:	99 27       	eor	r25, r25

0000059a <__movmemx_hi>:
 59a:	77 fd       	sbrc	r23, 7
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__movmemx_hi+0xe>
 59e:	05 90       	lpm	r0, Z+
 5a0:	0d 92       	st	X+, r0
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	e1 f7       	brne	.-8      	; 0x59e <__movmemx_hi+0x4>
 5a6:	08 95       	ret
 5a8:	01 90       	ld	r0, Z+
 5aa:	0d 92       	st	X+, r0
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <__movmemx_hi+0xe>
 5b0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000602 <_fini>:
 602:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000604 <__funcs_on_exit>:
 604:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000606 <__simulator_exit>:
 606:	08 95       	ret

Disassembly of section .text.exit:

000005c8 <exit>:
 5c8:	ec 01       	movw	r28, r24
 5ca:	0e 94 02 03 	call	0x604	; 0x604 <__funcs_on_exit>
 5ce:	0e 94 01 03 	call	0x602	; 0x602 <_fini>
 5d2:	ce 01       	movw	r24, r28
 5d4:	0e 94 03 03 	call	0x606	; 0x606 <__simulator_exit>
 5d8:	ce 01       	movw	r24, r28
 5da:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Exit>

Disassembly of section .text._Exit:

000005fc <_Exit>:
 5fc:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
